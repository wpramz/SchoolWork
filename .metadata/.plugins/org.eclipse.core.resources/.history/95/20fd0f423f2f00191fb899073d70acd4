/*
 * mtfList.h
 *
 *  Created on: Feb 12, 2019
 *      Author: willi
 */

#ifndef MTFLIST_H_
#define MTFLIST_H_

#include "node.h"


class mtfList{
public:
	mtfList(int values[]);
	~mtfList();
	bool empty() const;
	unsigned size() const;
	void add(int);
	void print();
	void clear();
	void removeValue(int);
	int search();

private:
	int sz;
	Node *head;
	Node *tail;
};
mtfList::mtfList(int values[]){
	sz = 0;
	head = new Node();
	tail = new Node();
	tail->setNext(head);
	for(int i = 0; i<values.size; i++){

	}
}
void mtfList::add(int value){
	sz++;
	Node* end;
	Node* tempAdd;
	tempAdd = new Node(value);
	end = tail->getNext();
	end->setNext(tempAdd);
	tail->setNext(tempAdd);
}



int mtfList::search(){

}



void mtfList::print(){
	Node* temp;
	temp = head;
	int count = 0;
	while(temp->getNext()!=NULL){
		count++;
		if(count%25==1){
			cout<<endl;
		}
		temp=temp->getNext();
		cout<<temp->getValue()<<" ";
	}
	cout<<endl;
}
void mtfList::removeValue(int value){
	Node* temp;
	Node* tempTwo;
	temp = head;
	while(temp->getNext()!=NULL){
		tempTwo = temp->getNext();
		if(tempTwo->getValue()==value){
			temp->setNext(tempTwo->getNext());
			tempTwo->setNext(NULL);
			delete tempTwo;
			sz--;
		}
		temp = temp->getNext();
	}
}


#endif /* MTFLIST_H_ */
